{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AzureML\n",
    "\n",
    "As we discussed in our previous reading, most of the cloud isn't really designed for you, an applied data analyst. Thankfully, Microsoft has created a *really* impressive little world for applied data analysts we'll be using called AzureML. \n",
    "\n",
    "But while this domain is called \"machine learning\", and it is optimized for standard \"fit, test, predict\"-esque scikit-learn workflows, it is also the place to go for doing other forms of data analysis too.\n",
    "\n",
    "So to get going, we're going to set up an Azure account as if you have never seen Azure before.\n",
    "\n",
    "Note that this is gonna seem like an *insane* amount of steps. Don't worry! Most of this you only have to do once per project, and you don't have to memorize this -- this site will always exist for reference! Just go through it, try and generally absorb what's going on, but don't obsess about the details. \n",
    "\n",
    "## Azure Subscription\n",
    "\n",
    "Unsurprisingly, you have to sign up with Azure. There are two ways to do this that will get you free credits:\n",
    "\n",
    "- If you are a student, you can [go here](https://azure.microsoft.com/en-us/free/students/) and sign up for a free student account. It'll only get you 100 dollars, and it doesn't require a credit card. It also has fewer restrictions than the next option, so its better even if there's less mony.  \n",
    "- Create a new regular account (with 200 dollars free credit to use in your first 30 days!) by creating a standard new account [here](https://azure.microsoft.com/en-us/). Note you will need a credit card to verify your account if you go this route.\n",
    "\n",
    "Note that if you have already gotten an account and used your free credits... try and make a new account with a new email address? For example, most universities give you a short-hand email, but you can also get a \"vanity\" long name (e.g. my email is both nce8@duke.edu and nick.eubank@duke.edu). And gmail address are easy to make. \n",
    "\n",
    "If you do so, your Azure account will also be associated with a free-money *Subscription*. A Subscription is the name Azure has for the person responsible for paying the bills, and everything you do will have to be under a subscription. If you start using Azure for a company or other large organization (like Duke), your account will get connected to the institution's subscription so your bills go to them. But for now, I think it makes more sense for you to set up your own account, both you can enjoy Microsoft's free money, but also (and more importantly) so you feel like you have your own cloud account that isn't dependent on someone else's support. As we've discussed repeatedly, one goal of this class is to ensure that you don't feel stranded when you leave this class (as sometimes happens when you learn on pre-configured VMs). The cloud is available to everyone, and by creating your own account, you now have access for yourself any time you want!\n",
    "\n",
    "Once you have an account, you should end up at the Azure Portal page. This is your home for Azure, and you'll come back here all the time. \n",
    "\n",
    "![azure_portal](images/azure_portal.png)\n",
    "\n",
    "\n",
    "## Create a Workspace\n",
    "\n",
    "All work within the AzureML ecosystem happens in a *Workspace*, which you can think of as being like a github repo for your project, able to keep everything associated with a project in one place. \n",
    "\n",
    "So setup a Workspace using the [directions here](https://docs.microsoft.com/en-us/azure/machine-learning/how-to-manage-workspace), with a few added notes from me:\n",
    "\n",
    "- You're gonna have to name a LOT of things. Like a crazy number. It's insane how many groups within groups within groups exist in Azure. So for everything I just recommend [your initials][name of thing you're naming]. I use my Duke ID (`nce8`), so I've named my Workspace `nce8ws`. Then when I name a resource group, I'd call it `nce8rg`. Later when you're comfortable with Azure, you can get fancy, but for now this will keep you sane. \n",
    "    - Note that some services allow underscores, some allow dashes, and some don't allow either, so... if you can avoid them, you'll be able to keep a more consistent naming scheme. \n",
    "- At the stage it says \"pick a Resource Group if you have one or create a new name\", you don't have one, so make a new name. See the note above. \n",
    "\n",
    "Once you create a Workspace, you'll be brought to a Workspace page. As of October 2020, Microsoft is in the process of migrating from one interface to another, so if you see this in the middle of your landing page:\n",
    "\n",
    "![azure_new_mlstudio](images/azure_new_mlstudio.png)\n",
    "\n",
    "Select \"Launch Now\", and you should end up on a page whose URL starts with `ml.azure.com`, and which looks like this:\n",
    "\n",
    "![azure_ml_studio](images/azure_ml_studio.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Resources & Resource Groups\n",
    "\n",
    "OK, so what was that *Resource Group* you created?\n",
    "\n",
    "In Azure, all the concrete things you want to use -- a virtual machine, a distributed cluster, a network storage drive -- are called *Resources*, and every resource has to live in a *Resource Group*. I *think* the goal of this is that if all the Resources for a project live in one Resource Group, then when you finish the project you can easily delete them all, and I think they're useful for corporations to manage billing. Personally, I find it's just kinda annoying. :) \n",
    "\n",
    "In this project, we'll only have the one Resource Group you created when you made your Workspace. You can see that Resource Group (and play with its settings) if you to Azure Portal, type \"Resource Groups\" into the search bar across the top, and select Resource Groups. This is also where you can add more Resource Groups if you need them in the future, and as we'll discuss below, where you can set spending alerts."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute on Azure\n",
    "\n",
    "In this class, we'll talk about two types of computing resources you can get through AzureML: \n",
    "\n",
    "1. **Rent a single Virtual Machine (VM)**: The first option for compute resources on AzureML is to just rent a single computer with lots of ram and processors. The advantage of this is that it's very easy to setup, you can interact with the VM using Jupyter, Jupyter Lab, or Rstudio's full graphical user interfaces just as you would on your personal laptop, just with more power. The *downside* is that there's a limit to how many resources you can get in a VM (at most, 128 cores or 4 V100 GPUs as of late 2020).\n",
    "2. **Rent a cluster**: Here's the real value of AzureML -- it allows you to very easily setup a *scalable* cluster of as many computers as you want. Generally, you set up your cluster with simple individual computers (\"nodes\") to manage cost, then you use them with a program like `dask` to do distributed work with large datasets. \n",
    "    - If you care, I'm 99% sure that what AzureML is setting up is a cluster of Docker containers (a way of creating fast Virtual Machines) managed through Kubernetes (a tool for managing and scaling clusters of Docker containers). If that means nothing to you, don't worry about it.\n",
    "\n",
    "### Renting a VM\n",
    "\n",
    "To setup compute resources, go into your ML workspace (URL starts with `ml.azure.com`) and click on `Compute` towards the bottom of the menu on the left. \n",
    "\n",
    "The first option for adding compute is `Compute Instances` -- this is a simple VM. So let's set one up! Click `Create`, pick `CPU` as your virtual machine type for now (you can also pick a GPU-centric VM if you want!), then check out all the options for `Virtual machine sizes`. As you will see, you can get computers with up to 72 individual cores, or up to 256 gb RAM! These are *single machines* with all these resources! Amazing, right? Note some may be greyed out to prevent you from overspending -- you can get those, just takes some extra permissions so Azure is sure you can afford it. \n",
    "\n",
    "The only catch to be aware of is the cost, which is also in that dropdown -- if you do rent a single machine with 72 cores, it'll cost you about 3 dollars an hour. If you just have a day of work you really need, this is a great deal; if you plan to be running simulations for a week... well, that's pretty darn expensive (though still way less than buying your own dedicated computer!). \n",
    "\n",
    "To try things out, let's get a basic model -- I'm gonna start a `Standard_D11_v2` for 18 cents an hour.\n",
    "\n",
    "Now once you have a VM, you can connect in two ways: you can use JupyterLab, RStudio, or Jupyter; or you can connect via the commandline by enabling SSH (which you will see is an option here). Enabling SSH requires sharing the public key from your personal computer, which takes a little work, so lets skip it for now and just leave that turned off. If/when you want that option, you can find directions for setting up [SSH keys here](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/mac-create-ssh-keys#provide-an-ssh-public-key-when-deploying-a-vm). The other ways to connect will become available when the machine is up andr unning. Click `Create`, and go grab a cup of coffee while your machine gets setup! (You'll have to wait about 5-7 minutes for it to get going). \n",
    "\n",
    "Once it's running, click on the name of your VM in your list of compute resources, and then click on the `Run` tab. There, on the right side, you'll see a series of links to Jupyter, JupyterLab, RSTudio, and (if you enabled it) ssh:\n",
    "\n",
    "![azure_vm_services](images/azure_vm_services.png)\n",
    "\n",
    "Just click on those links and the service you requested for the VM will pop up! TA-DA! You're running Jupyter on the cloud!\n",
    "\n",
    "(Because we're in AzureML, the VMs offered are all running the linux operating system and come with standard Data Science software installed. If you want a different kind of VM -- say, a Windows machine, or a linux machine without software pre-installed -- go back to your [Azure Portal page](https://portal.azure.com/#home), and select \"Virtual Machines.\" There you can completely control the configuration of your VM, and even set up a Remote Desktop Connection if you want to use a regular Windows experience with full graphical user interface.)\n",
    "\n",
    "**Now when you're done playing with this VM, *SHUT IT DOWN!* As long as it's running, you're paying for it (it takes a way for the bill to show up in your expenditures). The clusters we'll use later are able to turn themselves off if they're idle, but for this dedicated VM, you have to turn it off yourself.**\n",
    "\n",
    "If you want to go the VM route, you may also be interested in how you can mount your Cloud storage just like another volumn on your computer instead of accessing it through fancy Python libraries. If so, be sure to check out the later lesson on [Azure Storage configurations](cloud_azurestorage.ipynb)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting Up A Cluster\n",
    "\n",
    "The other thing you can do is setup a full computer cluster, with is a collection of (generally smaller) computers that are all networked together to act as one. \n",
    "\n",
    "The great thing about AzureML is that you can create a cluster that starts with, say, two computers (nodes), but then scale it up to 100 nodes when you've debugged your code and are ready to run a bit of computationally intensive code. Then when you're done, those nodes will automatically shut down after they've been idle for a set period of time, and you'll be back to the two nodes. And that means you only have to pay for the 100 nodes *when you are using them!*. Pretty amazing, honestly.\n",
    "\n",
    "OK, but we're not gonna set up a cluster here inthe browser because it's actually *much* easier to set up a cluster from a Python session (especially if you want to use `dask`), so for now I'll just point out that if you click on the `Compute clusters` tab of the `Compute` section of your workspace, you can see how you set up a cluster from here. It's not hard, but it's even easier from Python.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Storage on Azure\n",
    "\n",
    "As we discussed in the last tutorial, when working on the cloud your \"compute\" resources and your \"storage\" resources are sold (mostly) separately. This isn't entirely true -- your VM and your cluster computers have some harddrive space -- but that memory is tied to that compute, and so when you shut down your compute, anything saved on those harddrives goes away. So normally we need to get some persistent storage for our data and results. \n",
    "\n",
    "Thankfully, when you created your Workspace, Azure also created a \"Storage Account\" for you. Asure not only uses this Storage Account to store all metadata about your Workshop, but automatically connects this Storage Account to whenever you create a VM or cluster!\n",
    "\n",
    "To see this account:\n",
    "\n",
    "1. Go back to your [Azure Portal](http://portal.azure.com), \n",
    "2. Click on  \"Storage Account.\" \n",
    "\n",
    "There you should see a Storage Account whose name is [your workspace name] plus a long series of random digits. (They add the random numbers because Storage account names are used as URLs, so they have to be unique across all of Azure). \n",
    "\n",
    "While you might *think* that Storage Accounts are where we put our data, though, that's not quite right. Storage Accounts can hold 4 different kinds of things: Blob Containers, File Shares, Tables, and Queues. UGH. \n",
    "\n",
    "The good news is that, at this point in your life, you only need to worry about Blob Containers. As we mentioned in our \"What is the Cloud\" tutorial, Cloud storage comes in different flavors, and Blob is the most flexible, as it can hold anything (BLOB standands for **B**inary **L**arge **OB**ject storage). So unless you have reason to do otherwise, just use Blob Containers. \n",
    "\n",
    "Other types on Azure, just so you know them, are:\n",
    "\n",
    "- **File storage**: similar to Blob. File storage supports certain file sharing protocols that people may have been using before they came to the cloud, so makes life easy for people moving to the cloud. But fewer features than BLOB, so almost surely not for you. *Sounds* like the storage that'd be most familiar to a normal computer user, but it's a trick. Use BLOB. \n",
    "- **Queue storage**: specialized storage for messaging services. \n",
    "- **Table storage**: What's known as a NoSQL database system.\n",
    "\n",
    "And lest this whole \"Storage Account\" / Blob Containers / Files thing is getting confusing (I *know*, so many nested groups!!!), it looks something like this:\n",
    "\n",
    "![azure_blob_containers](images/azure_blob_containers.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating A New Storage Account\n",
    "\n",
    "Even though it isn't strictly necessary since we have a Storage Account associated with our Workspace, let's setup a new standalone Storage Account so you can see how it works. First, make sure you're in your \"Storage Accounts\" page (you can go back to your Portal and search for it if you need to). \n",
    "\n",
    "Then on the top right, click on the `+ Add` button:\n",
    "\n",
    "![azure_addstorageaccount](images/azure_addstorageaccount.png)\n",
    "\n",
    "Put it in the Resource Group you already have, give it a good name (I used `nce8sa`), and just accept the defaults. Congratulations!\n",
    "\n",
    "### Create Container and Add Data\n",
    "\n",
    "So let's add some data! Navigate to your Storage Accounts page, and click on the Storage Account you just created. Then on the left menu, and click on `Containers` under Blob Services. \n",
    "\n",
    "But now we can create a new Container for our data! So click the `+ Container` button, pick a name, and click `Create`. Congrats! You have a blob!\n",
    "\n",
    "We'll talk more about managing data using Python or the command line later, but for the moment, let's just upload an easy file. Click on your new Container, click `Upload` in the top left, and upload a file!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bringing It Together\n",
    "\n",
    "I know that's been a LOT of different things you've been creating, so here's an overview of what all we've created. Note that if you were a giant corportation, each of these would have more forks (your subscription would have lots of Resource Groups, etc.), but this accurately shows how these different organizational structures are nested within one another. \n",
    "\n",
    "![azure_structure.png](images/azure_structure.png)\n",
    "\n",
    "Note that your Workspace isn't in this picture! That's because it doesn't fit into this organizational hierarchy -- it's off to the side, a way of taggint certain Resource Groups and Resource as being related to a single project. But you can use the same Resource Group in multiple Workspaces, and Resources from multiple Resource Groups in a single Workspace."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Monitor Your Spending\n",
    "\n",
    "*Note: As of October 2020, this service is in preview for paid accounts, but likely won't work if you're just using a free demo account, sorry! I'm leaving it here for reference, however, since should be everywhere soon!*\n",
    "\n",
    "One last little safeguard: Azure doesn't let you set spending caps, but you can set up alerts. To do so, go back to Azure Portal and select the Subscriptions (search in the top bar if the key icon isn't already up). Click on it, then click \"Cost alerts\" on the left hand side.\n",
    "\n",
    "Then click `+ Add`, set a budget and hit `Next`. Then put in your email first (or it gets grumpy), then set some alerts for, say, 25%, 50%, 75% and 100% of your budget. Trust me -- we'll try hard to only set things up so that if you forget about them they'll shut themselves down, but the worst thing in the world is forgetting you left a VM running and coming back a week later to find a bill of hundreds of dollars! So add these alerts!\n",
    "\n",
    "Note you can also set alerts *by Resource Group*, but if you do, there's always a risk you'll create a new Resource Group at some point and forget to add alerts, then do something silly, so I just tag them to my subscription so it covers everything. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now To Do Some Computing!\n",
    "\n",
    "Congratulations -- you're now all set up. You have an Azure account, a Subscription, a Storage Account with a Blob container with a little data, and a Workspace. Now we'll move on to actually setting up and running a `dask` cluster. \n",
    "\n",
    "One last note: if you find all this pointing and clicking tedious, there are tools to manage all this kind of stuff from the command line, but because you need to know what you're looking for to know what commands to use, I think seeing the Azure websites with all their menus is a better way to start off. But if you do want to get into command line tools, you can read about the [Azure Command Line Interface (CLI)](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli) here, and as we'll see later, there are also lots of Python libraries that can do the same from within a Python session.\n",
    "\n",
    "[Let's do some actual data science!](cloud_dask.ipynb)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
