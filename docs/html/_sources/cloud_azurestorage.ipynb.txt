{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Managing Data on Azure"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Azure has quite a few ways to manage your data. Of all these, I think `azcopy` is the easiest to use, so I'm going to show you that, but I'll then show you some alternatives."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Azure CLI\n",
    "\n",
    "- Installation: Follow directions for your OS [here](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Managing Storage with Python\n",
    "\n",
    "Want to do this with Python instead? Here ya go! Just be aware that the code that runs this will hang for a LONG time while this upload takes place... "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "from azure.storage.blob import BlobServiceClient\n",
    "# Load connection string so y'all can't see it!\n",
    "with open('~/azure_secrets/azure_sa_connection_string.txt') as f:\n",
    "    connection_string = f.read()\n",
    "\n",
    "# Connect to storage account\n",
    "blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n",
    "\n",
    "# Because I have to rerun this file\n",
    "# a lot, first I'll see if container already \n",
    "# exists, and if it is, I'll delete it.\n",
    "# You won't really need this block...\n",
    "\n",
    "try:\n",
    "    blob_service_client.delete_container('temperatures')\n",
    "    time.sleep(60) # Give operation time to finish.\n",
    "    print(\"Container found and deleted\")\n",
    "except: \n",
    "    print(\"No container to delete!\")\n",
    "\n",
    "# Now create container!\n",
    "container_client = blob_service_client.create_container('temperatures')\n",
    "\n",
    "\n",
    "# Prep upload\n",
    "\n",
    "blob_client = blob_service_client.get_blob_client(container='temperatures', \n",
    "                                                  blob='ghcnd_daily_30gb.tar.gz')\n",
    "\n",
    "file_directory = '/users/nick/dropbox/MIDS_Data_Prep/' \\\n",
    "                 'ClimateData/processed_for_students/' \\\n",
    "                 'global_climate_data/'\n",
    "\n",
    "files_to_upload = ['ghcnd_daily_30gb.dat',\n",
    "                   'ghcnd-stations.txt']\n",
    "\n",
    "# Upload our file!\n",
    "for f in files_to_upload:\n",
    "    with open(file_directory + f, \"rb\") as data:\n",
    "        blob_client.upload_blob(data)\n",
    "        \n",
    "# Check to make sure it worked:\n",
    "blob_list = container.list_blobs()\n",
    "for blob in blob_list:\n",
    "    print(blob.name + '\\n')\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## AzCopy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Installing azcopy\n",
    "\n",
    "To install `azcopy`, download the [relevant version from here](https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10) and unzip the download. The follow these directions:\n",
    "\n",
    "**Mac**\n",
    "\n",
    "1. Open a terminal session and type `echo $PATH`. Confirm that `/usr/local/bin` is one of the files listed. \n",
    "2. Type `open /usr/local/bin`.\n",
    "3. Drag `azcopy` into that folder. \n",
    "4. Apple doesn't initially trust this program so before you close the folder, right-click on `azcopy` and select \"Open\". You'll get a warning, and say \"Open Anyway\". \n",
    "5. Now open a new terminal session and type `azcopy -h` to make sure the install worked. \n",
    "\n",
    "**Linux** \n",
    "\n",
    "See above, but skip step 4. \n",
    "\n",
    "**Windows**:\n",
    "\n",
    "Damned if I know!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Authorizing azcopy\n",
    "\n",
    "The next step is a little annoying, but here we go: you have to visit the webpage for the Storage Account you want to use and add a \"role\" to your Azure account. \n",
    "\n",
    "To do so, go to Azure Portal, click on Storage Accounts, then select the account you want to work with. Once you're inside:\n",
    "\n",
    "1. Click on \"Access Control (IAM)\"\n",
    "2. Click the \"+ Add\" button in the top left and select \"Add Role Assignment\"\n",
    "3. Under \"Role\", select \"Storage Blob Data Contributor\"\n",
    "4. Under \"Assign role to\" select \"User, group, or service principal\"\n",
    "5. Under \"select\" look up your Azure account\n",
    "6. Save. \n",
    "\n",
    "For me, this looks like:\n",
    "\n",
    "![azure_storageblobdatacontributor](images/azure_storageblobdatacontributor.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using azcopy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We'll demonstrate using `azcopy` by uploading our Climate Data we used in the [exercise we did in the Big Data section](exercises/Exercise_bigdata.ipynb) where we loaded global temperature data and measure global warming at a number of locations. You can get the data we're using for this [exercise here](https://www.dropbox.com/s/oq36w90hm9ltgvc/global_climate_data.zip?dl=0)). Note I'm decompressing the `ghcnd_daily_30gb.tar.gz` file before upload. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "cd /users/nick/dropbox/MIDS_Data_Prep/ClimateData/processed_for_students/global_climate_data\n",
    "ls"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to authenticate. To do so, you'll need your Tenant ID -- to get this, got to the Azure Portal and search \"Tenant\" in the search bar and select \"Tenant Properties\". There you'll find a Tenant ID, which you insert below:\n",
    "\n",
    "```sh\n",
    "# This launches a web browser login\n",
    "azcopy login --tenant-id \"XXXXXX-XXXX-XXXX-XXXX-XXXXXXXX\" \n",
    "```\n",
    "\n",
    "This will result in a message like:\n",
    "\n",
    "```\n",
    "To sign in, use a web browser to open the page https://microsoft.com/devicelogin and enter the code EA64FHRE5 to authenticate.\n",
    "```\n",
    "\n",
    "So do what it says, and when you come back the message should have changed to:\n",
    "\n",
    "```sh\n",
    "INFO: Login succeeded.\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll create a new container into which we can put our data:\n",
    "\n",
    "```bash\n",
    "azcopy make 'https://nce8sa.blob.core.windows.net/globaltemps'\n",
    "```\n",
    "\n",
    "This creates a blob container in my `nce8sa` Storage Account called `globaltemps`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we'll upload! Note that `azcopy` requires quotes around both the upload files and the destination address, even if you don't have any spaces. So this will upload all files within the current directory:\n",
    "\n",
    "```sh\n",
    "azcopy copy \"*\" \"https://nce8sa.blob.core.windows.net/globaltemps/\"\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As you can see, the syntax is pretty simple. The URL structure for Azure Blob storage is always:\n",
    "\n",
    "```\n",
    "https://[account].blob.core.windows.net/[container]/[path/to/blob]\"\n",
    "```\n",
    "\n",
    "And the syntax for `azcopy` is just \n",
    "\n",
    "```\n",
    "azcopy copy [source] [destination] [flags]\n",
    "```\n",
    "\n",
    "Note that you can also add a `--recursive` flag and point to a directory instead of using wildcards. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Downloading Files with azcopy**\n",
    "\n",
    "To download with `azcopy`, just flip the source and destination!\n",
    "\n",
    "```sh\n",
    "azcopy copy \"https://nce8sa.blob.core.windows.net/temperatures/readme.txt\" \"/users/nick/desktop/readme.txt\"\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's the full `azcopy` [documentation](https://docs.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Syncing Folders with azcopy**\n",
    "\n",
    "Often we have a copy of a folder we want mirrored on Azure, and then when we're done running some calculations, we want to bring the updated version of the folder back to our computer. Rather than copying the whole folder, though, you can run `azcopy sync`, which is smart enough to only transfer things that are different between two folders (like `rsync`, if you know what that is!)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Bash",
   "language": "bash",
   "name": "bash"
  },
  "language_info": {
   "codemirror_mode": "shell",
   "file_extension": ".sh",
   "mimetype": "text/x-sh",
   "name": "bash"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
